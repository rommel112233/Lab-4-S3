import java.util.*;

public class SimuladorUrgencia {
    private Hospital hospital;
    private List<Paciente> pacientesSimulados;

    public SimuladorUrgencia(List<Paciente> pacientesSimulados) {
        this.hospital = new Hospital();
        this.pacientesSimulados = pacientesSimulados;
    }

    public void simular(int pacientesPorDia) {
        int minutoActual = 0;
        int totalPacientes = pacientesSimulados.size();
        int indicePaciente = 0;
        int nuevosDesdeUltimaAtencion = 0;

        Map<Integer, Integer> pacientesAtendidosPorCategoria = new HashMap<>();
        Map<Integer, Long> totalEsperaPorCategoria = new HashMap<>();
        List<Paciente> pacientesFueraDeTiempo = new ArrayList<>();

        while (minutoActual < 1440) {
            if (minutoActual % 10 == 0 && indicePaciente < totalPacientes) {
                Paciente nuevo = pacientesSimulados.get(indicePaciente++);
                hospital.registrarPaciente(nuevo);
                nuevosDesdeUltimaAtencion++;
            }

            if (minutoActual % 15 == 0) {
                Paciente forzado = atenderPacienteFueraDeTiempo(minutoActual);
                if (forzado != null) {
                    procesarEstadisticas(forzado, minutoActual, pacientesAtendidosPorCategoria,
                                         totalEsperaPorCategoria, pacientesFueraDeTiempo);
                } else {
                    Paciente atendido = hospital.atenderSiguiente();
                    if (atendido != null) {
                        procesarEstadisticas(atendido, minutoActual, pacientesAtendidosPorCategoria,
                                             totalEsperaPorCategoria, pacientesFueraDeTiempo);
                    }
                }
            }

            if (nuevosDesdeUltimaAtencion >= 3) {
                for (int i = 0; i < 2; i++) {
                    Paciente forzado = atenderPacienteFueraDeTiempo(minutoActual);
                    if (forzado != null) {
                        procesarEstadisticas(forzado, minutoActual, pacientesAtendidosPorCategoria,
                                             totalEsperaPorCategoria, pacientesFueraDeTiempo);
                    } else {
                        Paciente atendido = hospital.atenderSiguiente();
                        if (atendido != null) {
                            procesarEstadisticas(atendido, minutoActual, pacientesAtendidosPorCategoria,
                                                 totalEsperaPorCategoria, pacientesFueraDeTiempo);
                        }
                    }
                }
                nuevosDesdeUltimaAtencion = 0;
            }

            minutoActual++;
        }

        System.out.println("\n--- ESTADÍSTICAS FINALES ---");
        int totalAtendidos = hospital.getPacientesAtendidos().size();
        System.out.println("Pacientes atendidos: " + totalAtendidos);

        for (int cat = 1; cat <= 5; cat++) {
            int cantidad = pacientesAtendidosPorCategoria.getOrDefault(cat, 0);
            long totalEspera = totalEsperaPorCategoria.getOrDefault(cat, 0L);
            double promedio = cantidad > 0 ? (double) totalEspera / cantidad : 0;
            System.out.println("Categoría C" + cat + ": " + cantidad + " pacientes, promedio espera: " + promedio + " min");
        }

        System.out.println("Pacientes fuera de tiempo: " + pacientesFueraDeTiempo.size());
        for (Paciente p : pacientesFueraDeTiempo) {
            System.out.println("- ID: " + p.getId() + ", categoría: C" + p.getCategoria() +
                               ", espera: " + p.tiempoEsperaActual() + " min");
        }
    }

    private Paciente atenderPacienteFueraDeTiempo(int minutoActual) {
        for (Paciente p : new ArrayList<>(hospital.getColaAtencion())) {
            long tiempoEspera = (minutoActual * 60 - p.getTiempollegada()) / 60;
            if (pacienteFueraDeTiempo(p.getCategoria(), tiempoEspera)) {
                hospital.getColaAtencion().remove(p);
                p.setEstado("atendido");
                p.registrarCambio("Atención forzada por exceso de espera");
                hospital.getPacientesAtendidos().add(p);
                return p;
            }
        }
        return null;
    }

    private boolean pacienteFueraDeTiempo(int categoria, long tiempoEspera) {
        switch (categoria) {
            case 1: return tiempoEspera > 0;
            case 2: return tiempoEspera > 30;
            case 3: return tiempoEspera > 90;
            case 4: return tiempoEspera > 180;
            default: return false;
        }
    }

    private void procesarEstadisticas(Paciente p, int minutoActual,
                                       Map<Integer, Integer> cantidad,
                                       Map<Integer, Long> totalEspera,
                                       List<Paciente> fueraDeTiempo) {

        int cat = p.getCategoria();
        long llegada = p.getTiempollegada();
        long tiempoEspera = (minutoActual * 60 - llegada) / 60;

        cantidad.put(cat, cantidad.getOrDefault(cat, 0) + 1);
        totalEspera.put(cat, totalEspera.getOrDefault(cat, 0L) + tiempoEspera);

        if (pacienteFueraDeTiempo(cat, tiempoEspera)) {
            fueraDeTiempo.add(p);
        }
    }
}
